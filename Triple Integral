import numpy as np
from matplotlib import pyplot as plt
# import module
from scipy.special import roots_legendre, eval_legendre
import matplotlib.pyplot as plt
import numpy as np
import sympy as sy
from prettytable import PrettyTable
import numpy as np

m = 10 # number of gauss points in x direction
n = 10 # number of gauss points in y direction
p = 10 # number of gauss points in z direction

a= 0 # lower interval of x variable
b= 1 # upper interval of x variable

def c(x):
  '''lower integral of y variable
  in terms of x variable'''
  return (1)
def d(x):
  '''upper integral of y variable
  in terms of x variable'''
  return (x)

def alpha(x,y):
  '''lower integral of z variable
  in terms of x and y variable'''
  return -y
def beta(x,y):
  '''upper integral of z variable
  in terms of x and y variable'''
  return (x+y)

def f(x,y,z):
  '''
  x, y, z - variables in the integrand
  function returns integrand of double variables whose integral is to evaluated
  '''
  return (x)

h1 = (b-a)/2
h2 = (a+b)/2
N  = max(m,n,p)
r, w = roots_legendre(N)

J = 0
for i in range(m):
  x = h1*r[i] + h2
  d1 = d(x)
  c1 = c(x)
  k1 = (d1 - c1)/2
  k2 = (d1 + c1)/2
  JX = 0
  for j in range(n):
    y = k1*r[j] + k2
    beta1 = beta(x,y)
    alpha1 = alpha(x,y)
    l1 = (beta1-alpha1)/2
    l2 = (beta1+alpha1)/2
    JY = 0
    for k in range(p):
      z = l1*r[k] + l2
      Q = f(x, y, z)
      JY += w[k]*f(x, y, z)
    JX += JY*w[j]*l1
  J += JX*w[i]*k1
J = h1*J

print(f"Integral value using gauss quadraure method with {m} gauss points in x-direction, {n} gauss points in y-direction and {p} gauss points in z-direction = {J}") 
